// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bookingbook "github.com/bowoBp/csmart/modules/bookingbook"
	mock "github.com/stretchr/testify/mock"
)

// BooksUseCase is an autogenerated mock type for the BooksUseCase type
type BooksUseCase struct {
	mock.Mock
}

type BooksUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *BooksUseCase) EXPECT() *BooksUseCase_Expecter {
	return &BooksUseCase_Expecter{mock: &_m.Mock}
}

// GetBooks provides a mock function with given fields: query
func (_m *BooksUseCase) GetBooks(query map[string]string) ([]bookingbook.Book, error) {
	ret := _m.Called(query)

	var r0 []bookingbook.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) ([]bookingbook.Book, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) []bookingbook.Book); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookingbook.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BooksUseCase_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type BooksUseCase_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - query map[string]string
func (_e *BooksUseCase_Expecter) GetBooks(query interface{}) *BooksUseCase_GetBooks_Call {
	return &BooksUseCase_GetBooks_Call{Call: _e.mock.On("GetBooks", query)}
}

func (_c *BooksUseCase_GetBooks_Call) Run(run func(query map[string]string)) *BooksUseCase_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *BooksUseCase_GetBooks_Call) Return(_a0 []bookingbook.Book, _a1 error) *BooksUseCase_GetBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BooksUseCase_GetBooks_Call) RunAndReturn(run func(map[string]string) ([]bookingbook.Book, error)) *BooksUseCase_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBooks provides a mock function with given fields: query
func (_m *BooksUseCase) SubmitBooks(query bookingbook.BodySubmitBook) (bool, error) {
	ret := _m.Called(query)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(bookingbook.BodySubmitBook) (bool, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(bookingbook.BodySubmitBook) bool); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(bookingbook.BodySubmitBook) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BooksUseCase_SubmitBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBooks'
type BooksUseCase_SubmitBooks_Call struct {
	*mock.Call
}

// SubmitBooks is a helper method to define mock.On call
//   - query bookingbook.BodySubmitBook
func (_e *BooksUseCase_Expecter) SubmitBooks(query interface{}) *BooksUseCase_SubmitBooks_Call {
	return &BooksUseCase_SubmitBooks_Call{Call: _e.mock.On("SubmitBooks", query)}
}

func (_c *BooksUseCase_SubmitBooks_Call) Run(run func(query bookingbook.BodySubmitBook)) *BooksUseCase_SubmitBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bookingbook.BodySubmitBook))
	})
	return _c
}

func (_c *BooksUseCase_SubmitBooks_Call) Return(_a0 bool, _a1 error) *BooksUseCase_SubmitBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BooksUseCase_SubmitBooks_Call) RunAndReturn(run func(bookingbook.BodySubmitBook) (bool, error)) *BooksUseCase_SubmitBooks_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBooksUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBooksUseCase creates a new instance of BooksUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBooksUseCase(t mockConstructorTestingTNewBooksUseCase) *BooksUseCase {
	mock := &BooksUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
