// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bookingbook "github.com/bowoBp/csmart/modules/bookingbook"
	mock "github.com/stretchr/testify/mock"
)

// BooksController is an autogenerated mock type for the BooksController type
type BooksController struct {
	mock.Mock
}

type BooksController_Expecter struct {
	mock *mock.Mock
}

func (_m *BooksController) EXPECT() *BooksController_Expecter {
	return &BooksController_Expecter{mock: &_m.Mock}
}

// GetBooks provides a mock function with given fields: query
func (_m *BooksController) GetBooks(query map[string]string) bookingbook.BooksResponse {
	ret := _m.Called(query)

	var r0 bookingbook.BooksResponse
	if rf, ok := ret.Get(0).(func(map[string]string) bookingbook.BooksResponse); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(bookingbook.BooksResponse)
	}

	return r0
}

// BooksController_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type BooksController_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - query map[string]string
func (_e *BooksController_Expecter) GetBooks(query interface{}) *BooksController_GetBooks_Call {
	return &BooksController_GetBooks_Call{Call: _e.mock.On("GetBooks", query)}
}

func (_c *BooksController_GetBooks_Call) Run(run func(query map[string]string)) *BooksController_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *BooksController_GetBooks_Call) Return(_a0 bookingbook.BooksResponse) *BooksController_GetBooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BooksController_GetBooks_Call) RunAndReturn(run func(map[string]string) bookingbook.BooksResponse) *BooksController_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBooks provides a mock function with given fields: body
func (_m *BooksController) SubmitBooks(body bookingbook.BodySubmitBook) bookingbook.SubmitResponse {
	ret := _m.Called(body)

	var r0 bookingbook.SubmitResponse
	if rf, ok := ret.Get(0).(func(bookingbook.BodySubmitBook) bookingbook.SubmitResponse); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Get(0).(bookingbook.SubmitResponse)
	}

	return r0
}

// BooksController_SubmitBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBooks'
type BooksController_SubmitBooks_Call struct {
	*mock.Call
}

// SubmitBooks is a helper method to define mock.On call
//   - body bookingbook.BodySubmitBook
func (_e *BooksController_Expecter) SubmitBooks(body interface{}) *BooksController_SubmitBooks_Call {
	return &BooksController_SubmitBooks_Call{Call: _e.mock.On("SubmitBooks", body)}
}

func (_c *BooksController_SubmitBooks_Call) Run(run func(body bookingbook.BodySubmitBook)) *BooksController_SubmitBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bookingbook.BodySubmitBook))
	})
	return _c
}

func (_c *BooksController_SubmitBooks_Call) Return(_a0 bookingbook.SubmitResponse) *BooksController_SubmitBooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BooksController_SubmitBooks_Call) RunAndReturn(run func(bookingbook.BodySubmitBook) bookingbook.SubmitResponse) *BooksController_SubmitBooks_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBooksController interface {
	mock.TestingT
	Cleanup(func())
}

// NewBooksController creates a new instance of BooksController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBooksController(t mockConstructorTestingTNewBooksController) *BooksController {
	mock := &BooksController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
